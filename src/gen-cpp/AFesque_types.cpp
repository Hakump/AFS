/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AFesque_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ServerException::~ServerException() noexcept {
}


void ServerException::__set_err_no(const int32_t val) {
  this->err_no = val;
}
std::ostream& operator<<(std::ostream& out, const ServerException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServerException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->err_no);
          this->__isset.err_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerException");

  xfer += oprot->writeFieldBegin("err_no", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->err_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerException &a, ServerException &b) {
  using ::std::swap;
  swap(a.err_no, b.err_no);
  swap(a.__isset, b.__isset);
}

ServerException::ServerException(const ServerException& other0) noexcept : TException() {
  err_no = other0.err_no;
  __isset = other0.__isset;
}
ServerException& ServerException::operator=(const ServerException& other1) noexcept {
  err_no = other1.err_no;
  __isset = other1.__isset;
  return *this;
}
void ServerException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerException(";
  out << "err_no=" << to_string(err_no);
  out << ")";
}

const char* ServerException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ServerException";
  }
}


FStatShort::~FStatShort() noexcept {
}


void FStatShort::__set_st_mtimes_tv_sec(const int64_t val) {
  this->st_mtimes_tv_sec = val;
}

void FStatShort::__set_st_mtimes_tv_nsec(const int64_t val) {
  this->st_mtimes_tv_nsec = val;
}

void FStatShort::__set_st_atimes_tv_sec(const int64_t val) {
  this->st_atimes_tv_sec = val;
}

void FStatShort::__set_st_atimes_tv_nsec(const int64_t val) {
  this->st_atimes_tv_nsec = val;
}

void FStatShort::__set_is_compressed(const bool val) {
  this->is_compressed = val;
}

void FStatShort::__set_num_chunks(const int32_t val) {
  this->num_chunks = val;
}
std::ostream& operator<<(std::ostream& out, const FStatShort& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FStatShort::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_mtimes_tv_sec);
          this->__isset.st_mtimes_tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_mtimes_tv_nsec);
          this->__isset.st_mtimes_tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_atimes_tv_sec);
          this->__isset.st_atimes_tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_atimes_tv_nsec);
          this->__isset.st_atimes_tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_compressed);
          this->__isset.is_compressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_chunks);
          this->__isset.num_chunks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FStatShort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FStatShort");

  xfer += oprot->writeFieldBegin("st_mtimes_tv_sec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->st_mtimes_tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mtimes_tv_nsec", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->st_mtimes_tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atimes_tv_sec", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->st_atimes_tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atimes_tv_nsec", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->st_atimes_tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_compressed", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->is_compressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_chunks", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->num_chunks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FStatShort &a, FStatShort &b) {
  using ::std::swap;
  swap(a.st_mtimes_tv_sec, b.st_mtimes_tv_sec);
  swap(a.st_mtimes_tv_nsec, b.st_mtimes_tv_nsec);
  swap(a.st_atimes_tv_sec, b.st_atimes_tv_sec);
  swap(a.st_atimes_tv_nsec, b.st_atimes_tv_nsec);
  swap(a.is_compressed, b.is_compressed);
  swap(a.num_chunks, b.num_chunks);
  swap(a.__isset, b.__isset);
}

FStatShort::FStatShort(const FStatShort& other2) noexcept {
  st_mtimes_tv_sec = other2.st_mtimes_tv_sec;
  st_mtimes_tv_nsec = other2.st_mtimes_tv_nsec;
  st_atimes_tv_sec = other2.st_atimes_tv_sec;
  st_atimes_tv_nsec = other2.st_atimes_tv_nsec;
  is_compressed = other2.is_compressed;
  num_chunks = other2.num_chunks;
  __isset = other2.__isset;
}
FStatShort& FStatShort::operator=(const FStatShort& other3) noexcept {
  st_mtimes_tv_sec = other3.st_mtimes_tv_sec;
  st_mtimes_tv_nsec = other3.st_mtimes_tv_nsec;
  st_atimes_tv_sec = other3.st_atimes_tv_sec;
  st_atimes_tv_nsec = other3.st_atimes_tv_nsec;
  is_compressed = other3.is_compressed;
  num_chunks = other3.num_chunks;
  __isset = other3.__isset;
  return *this;
}
void FStatShort::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FStatShort(";
  out << "st_mtimes_tv_sec=" << to_string(st_mtimes_tv_sec);
  out << ", " << "st_mtimes_tv_nsec=" << to_string(st_mtimes_tv_nsec);
  out << ", " << "st_atimes_tv_sec=" << to_string(st_atimes_tv_sec);
  out << ", " << "st_atimes_tv_nsec=" << to_string(st_atimes_tv_nsec);
  out << ", " << "is_compressed=" << to_string(is_compressed);
  out << ", " << "num_chunks=" << to_string(num_chunks);
  out << ")";
}


FStat::~FStat() noexcept {
}


void FStat::__set_st_dev(const int64_t val) {
  this->st_dev = val;
}

void FStat::__set_st_ino(const int64_t val) {
  this->st_ino = val;
}

void FStat::__set_st_mode(const int32_t val) {
  this->st_mode = val;
}

void FStat::__set_st_nlink(const int64_t val) {
  this->st_nlink = val;
}

void FStat::__set_st_gid(const int32_t val) {
  this->st_gid = val;
}

void FStat::__set_st_rdev(const int64_t val) {
  this->st_rdev = val;
}

void FStat::__set_st_size(const int64_t val) {
  this->st_size = val;
}

void FStat::__set_st_blksize(const int64_t val) {
  this->st_blksize = val;
}

void FStat::__set_st_blocks(const int64_t val) {
  this->st_blocks = val;
}

void FStat::__set_st_mtimes_tv_sec(const int64_t val) {
  this->st_mtimes_tv_sec = val;
}

void FStat::__set_st_mtimes_tv_nsec(const int64_t val) {
  this->st_mtimes_tv_nsec = val;
}

void FStat::__set_st_atimes_tv_sec(const int64_t val) {
  this->st_atimes_tv_sec = val;
}

void FStat::__set_st_atimes_tv_nsec(const int64_t val) {
  this->st_atimes_tv_nsec = val;
}

void FStat::__set_st_ctimes_tv_sec(const int64_t val) {
  this->st_ctimes_tv_sec = val;
}

void FStat::__set_st_ctimes_tv_nsec(const int64_t val) {
  this->st_ctimes_tv_nsec = val;
}
std::ostream& operator<<(std::ostream& out, const FStat& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FStat::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_dev);
          this->__isset.st_dev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_ino);
          this->__isset.st_ino = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_mode);
          this->__isset.st_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_nlink);
          this->__isset.st_nlink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_gid);
          this->__isset.st_gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_rdev);
          this->__isset.st_rdev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_size);
          this->__isset.st_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blksize);
          this->__isset.st_blksize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blocks);
          this->__isset.st_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_mtimes_tv_sec);
          this->__isset.st_mtimes_tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_mtimes_tv_nsec);
          this->__isset.st_mtimes_tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_atimes_tv_sec);
          this->__isset.st_atimes_tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_atimes_tv_nsec);
          this->__isset.st_atimes_tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_ctimes_tv_sec);
          this->__isset.st_ctimes_tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_ctimes_tv_nsec);
          this->__isset.st_ctimes_tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FStat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FStat");

  xfer += oprot->writeFieldBegin("st_dev", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->st_dev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ino", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->st_ino);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->st_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_nlink", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->st_nlink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_gid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->st_gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_rdev", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->st_rdev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_size", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->st_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blksize", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->st_blksize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blocks", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->st_blocks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mtimes_tv_sec", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->st_mtimes_tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mtimes_tv_nsec", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->st_mtimes_tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atimes_tv_sec", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->st_atimes_tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atimes_tv_nsec", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->st_atimes_tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ctimes_tv_sec", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->st_ctimes_tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ctimes_tv_nsec", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->st_ctimes_tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FStat &a, FStat &b) {
  using ::std::swap;
  swap(a.st_dev, b.st_dev);
  swap(a.st_ino, b.st_ino);
  swap(a.st_mode, b.st_mode);
  swap(a.st_nlink, b.st_nlink);
  swap(a.st_gid, b.st_gid);
  swap(a.st_rdev, b.st_rdev);
  swap(a.st_size, b.st_size);
  swap(a.st_blksize, b.st_blksize);
  swap(a.st_blocks, b.st_blocks);
  swap(a.st_mtimes_tv_sec, b.st_mtimes_tv_sec);
  swap(a.st_mtimes_tv_nsec, b.st_mtimes_tv_nsec);
  swap(a.st_atimes_tv_sec, b.st_atimes_tv_sec);
  swap(a.st_atimes_tv_nsec, b.st_atimes_tv_nsec);
  swap(a.st_ctimes_tv_sec, b.st_ctimes_tv_sec);
  swap(a.st_ctimes_tv_nsec, b.st_ctimes_tv_nsec);
  swap(a.__isset, b.__isset);
}

FStat::FStat(const FStat& other4) noexcept {
  st_dev = other4.st_dev;
  st_ino = other4.st_ino;
  st_mode = other4.st_mode;
  st_nlink = other4.st_nlink;
  st_gid = other4.st_gid;
  st_rdev = other4.st_rdev;
  st_size = other4.st_size;
  st_blksize = other4.st_blksize;
  st_blocks = other4.st_blocks;
  st_mtimes_tv_sec = other4.st_mtimes_tv_sec;
  st_mtimes_tv_nsec = other4.st_mtimes_tv_nsec;
  st_atimes_tv_sec = other4.st_atimes_tv_sec;
  st_atimes_tv_nsec = other4.st_atimes_tv_nsec;
  st_ctimes_tv_sec = other4.st_ctimes_tv_sec;
  st_ctimes_tv_nsec = other4.st_ctimes_tv_nsec;
  __isset = other4.__isset;
}
FStat& FStat::operator=(const FStat& other5) noexcept {
  st_dev = other5.st_dev;
  st_ino = other5.st_ino;
  st_mode = other5.st_mode;
  st_nlink = other5.st_nlink;
  st_gid = other5.st_gid;
  st_rdev = other5.st_rdev;
  st_size = other5.st_size;
  st_blksize = other5.st_blksize;
  st_blocks = other5.st_blocks;
  st_mtimes_tv_sec = other5.st_mtimes_tv_sec;
  st_mtimes_tv_nsec = other5.st_mtimes_tv_nsec;
  st_atimes_tv_sec = other5.st_atimes_tv_sec;
  st_atimes_tv_nsec = other5.st_atimes_tv_nsec;
  st_ctimes_tv_sec = other5.st_ctimes_tv_sec;
  st_ctimes_tv_nsec = other5.st_ctimes_tv_nsec;
  __isset = other5.__isset;
  return *this;
}
void FStat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FStat(";
  out << "st_dev=" << to_string(st_dev);
  out << ", " << "st_ino=" << to_string(st_ino);
  out << ", " << "st_mode=" << to_string(st_mode);
  out << ", " << "st_nlink=" << to_string(st_nlink);
  out << ", " << "st_gid=" << to_string(st_gid);
  out << ", " << "st_rdev=" << to_string(st_rdev);
  out << ", " << "st_size=" << to_string(st_size);
  out << ", " << "st_blksize=" << to_string(st_blksize);
  out << ", " << "st_blocks=" << to_string(st_blocks);
  out << ", " << "st_mtimes_tv_sec=" << to_string(st_mtimes_tv_sec);
  out << ", " << "st_mtimes_tv_nsec=" << to_string(st_mtimes_tv_nsec);
  out << ", " << "st_atimes_tv_sec=" << to_string(st_atimes_tv_sec);
  out << ", " << "st_atimes_tv_nsec=" << to_string(st_atimes_tv_nsec);
  out << ", " << "st_ctimes_tv_sec=" << to_string(st_ctimes_tv_sec);
  out << ", " << "st_ctimes_tv_nsec=" << to_string(st_ctimes_tv_nsec);
  out << ")";
}


tDirent::~tDirent() noexcept {
}


void tDirent::__set_d_ino(const int64_t val) {
  this->d_ino = val;
}

void tDirent::__set_d_off(const int64_t val) {
  this->d_off = val;
}

void tDirent::__set_d_reclen(const int16_t val) {
  this->d_reclen = val;
}

void tDirent::__set_d_type(const int8_t val) {
  this->d_type = val;
}

void tDirent::__set_d_name(const std::string& val) {
  this->d_name = val;
}
std::ostream& operator<<(std::ostream& out, const tDirent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t tDirent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->d_ino);
          this->__isset.d_ino = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->d_off);
          this->__isset.d_off = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->d_reclen);
          this->__isset.d_reclen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->d_type);
          this->__isset.d_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->d_name);
          this->__isset.d_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t tDirent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("tDirent");

  xfer += oprot->writeFieldBegin("d_ino", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->d_ino);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_off", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->d_off);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_reclen", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->d_reclen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_type", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->d_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->d_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(tDirent &a, tDirent &b) {
  using ::std::swap;
  swap(a.d_ino, b.d_ino);
  swap(a.d_off, b.d_off);
  swap(a.d_reclen, b.d_reclen);
  swap(a.d_type, b.d_type);
  swap(a.d_name, b.d_name);
  swap(a.__isset, b.__isset);
}

tDirent::tDirent(const tDirent& other6) {
  d_ino = other6.d_ino;
  d_off = other6.d_off;
  d_reclen = other6.d_reclen;
  d_type = other6.d_type;
  d_name = other6.d_name;
  __isset = other6.__isset;
}
tDirent& tDirent::operator=(const tDirent& other7) {
  d_ino = other7.d_ino;
  d_off = other7.d_off;
  d_reclen = other7.d_reclen;
  d_type = other7.d_type;
  d_name = other7.d_name;
  __isset = other7.__isset;
  return *this;
}
void tDirent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "tDirent(";
  out << "d_ino=" << to_string(d_ino);
  out << ", " << "d_off=" << to_string(d_off);
  out << ", " << "d_reclen=" << to_string(d_reclen);
  out << ", " << "d_type=" << to_string(d_type);
  out << ", " << "d_name=" << to_string(d_name);
  out << ")";
}


