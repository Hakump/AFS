/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AFesqueSvc_H
#define AFesqueSvc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "AFesque_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AFesqueSvcIf {
 public:
  virtual ~AFesqueSvcIf() {}
  virtual void Fetch(std::string& _return, const std::string& path) = 0;
  virtual void Fetch_Chunk(std::string& _return, const std::string& path, const int32_t chunk) = 0;
  virtual void Store(FStatShort& _return, const std::string& path, const std::string& file_str) = 0;
  virtual void Remove(const std::string& path) = 0;
  virtual void Create(const std::string& path, const int32_t mode) = 0;
  virtual void MakeDir(const std::string& path, const int32_t mode) = 0;
  virtual void RemoveDir(const std::string& path) = 0;
  virtual void TestAuth(FStatShort& _return, const std::string& path) = 0;
  virtual void GetFileStat(FStat& _return, const std::string& path) = 0;
  virtual void ListDir(std::vector<tDirent> & _return, const std::string& path) = 0;
  virtual void server_test(const std::string& msg, const int32_t delay) = 0;
};

class AFesqueSvcIfFactory {
 public:
  typedef AFesqueSvcIf Handler;

  virtual ~AFesqueSvcIfFactory() {}

  virtual AFesqueSvcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AFesqueSvcIf* /* handler */) = 0;
  };

class AFesqueSvcIfSingletonFactory : virtual public AFesqueSvcIfFactory {
 public:
  AFesqueSvcIfSingletonFactory(const ::std::shared_ptr<AFesqueSvcIf>& iface) : iface_(iface) {}
  virtual ~AFesqueSvcIfSingletonFactory() {}

  virtual AFesqueSvcIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AFesqueSvcIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AFesqueSvcIf> iface_;
};

class AFesqueSvcNull : virtual public AFesqueSvcIf {
 public:
  virtual ~AFesqueSvcNull() {}
  void Fetch(std::string& /* _return */, const std::string& /* path */) override {
    return;
  }
  void Fetch_Chunk(std::string& /* _return */, const std::string& /* path */, const int32_t /* chunk */) override {
    return;
  }
  void Store(FStatShort& /* _return */, const std::string& /* path */, const std::string& /* file_str */) override {
    return;
  }
  void Remove(const std::string& /* path */) override {
    return;
  }
  void Create(const std::string& /* path */, const int32_t /* mode */) override {
    return;
  }
  void MakeDir(const std::string& /* path */, const int32_t /* mode */) override {
    return;
  }
  void RemoveDir(const std::string& /* path */) override {
    return;
  }
  void TestAuth(FStatShort& /* _return */, const std::string& /* path */) override {
    return;
  }
  void GetFileStat(FStat& /* _return */, const std::string& /* path */) override {
    return;
  }
  void ListDir(std::vector<tDirent> & /* _return */, const std::string& /* path */) override {
    return;
  }
  void server_test(const std::string& /* msg */, const int32_t /* delay */) override {
    return;
  }
};

typedef struct _AFesqueSvc_Fetch_args__isset {
  _AFesqueSvc_Fetch_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_Fetch_args__isset;

class AFesqueSvc_Fetch_args {
 public:

  AFesqueSvc_Fetch_args(const AFesqueSvc_Fetch_args&);
  AFesqueSvc_Fetch_args& operator=(const AFesqueSvc_Fetch_args&);
  AFesqueSvc_Fetch_args() noexcept
                        : path() {
  }

  virtual ~AFesqueSvc_Fetch_args() noexcept;
  std::string path;

  _AFesqueSvc_Fetch_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_Fetch_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_Fetch_pargs {
 public:


  virtual ~AFesqueSvc_Fetch_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Fetch_result__isset {
  _AFesqueSvc_Fetch_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Fetch_result__isset;

class AFesqueSvc_Fetch_result {
 public:

  AFesqueSvc_Fetch_result(const AFesqueSvc_Fetch_result&);
  AFesqueSvc_Fetch_result& operator=(const AFesqueSvc_Fetch_result&);
  AFesqueSvc_Fetch_result() noexcept
                          : success() {
  }

  virtual ~AFesqueSvc_Fetch_result() noexcept;
  std::string success;
  ServerException se;

  _AFesqueSvc_Fetch_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_Fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Fetch_presult__isset {
  _AFesqueSvc_Fetch_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Fetch_presult__isset;

class AFesqueSvc_Fetch_presult {
 public:


  virtual ~AFesqueSvc_Fetch_presult() noexcept;
  std::string* success;
  ServerException se;

  _AFesqueSvc_Fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_Fetch_Chunk_args__isset {
  _AFesqueSvc_Fetch_Chunk_args__isset() : path(false), chunk(false) {}
  bool path :1;
  bool chunk :1;
} _AFesqueSvc_Fetch_Chunk_args__isset;

class AFesqueSvc_Fetch_Chunk_args {
 public:

  AFesqueSvc_Fetch_Chunk_args(const AFesqueSvc_Fetch_Chunk_args&);
  AFesqueSvc_Fetch_Chunk_args& operator=(const AFesqueSvc_Fetch_Chunk_args&);
  AFesqueSvc_Fetch_Chunk_args() noexcept
                              : path(),
                                chunk(0) {
  }

  virtual ~AFesqueSvc_Fetch_Chunk_args() noexcept;
  std::string path;
  int32_t chunk;

  _AFesqueSvc_Fetch_Chunk_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_chunk(const int32_t val);

  bool operator == (const AFesqueSvc_Fetch_Chunk_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(chunk == rhs.chunk))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Fetch_Chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Fetch_Chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_Fetch_Chunk_pargs {
 public:


  virtual ~AFesqueSvc_Fetch_Chunk_pargs() noexcept;
  const std::string* path;
  const int32_t* chunk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Fetch_Chunk_result__isset {
  _AFesqueSvc_Fetch_Chunk_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Fetch_Chunk_result__isset;

class AFesqueSvc_Fetch_Chunk_result {
 public:

  AFesqueSvc_Fetch_Chunk_result(const AFesqueSvc_Fetch_Chunk_result&);
  AFesqueSvc_Fetch_Chunk_result& operator=(const AFesqueSvc_Fetch_Chunk_result&);
  AFesqueSvc_Fetch_Chunk_result() noexcept
                                : success() {
  }

  virtual ~AFesqueSvc_Fetch_Chunk_result() noexcept;
  std::string success;
  ServerException se;

  _AFesqueSvc_Fetch_Chunk_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_Fetch_Chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Fetch_Chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Fetch_Chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Fetch_Chunk_presult__isset {
  _AFesqueSvc_Fetch_Chunk_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Fetch_Chunk_presult__isset;

class AFesqueSvc_Fetch_Chunk_presult {
 public:


  virtual ~AFesqueSvc_Fetch_Chunk_presult() noexcept;
  std::string* success;
  ServerException se;

  _AFesqueSvc_Fetch_Chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_Store_args__isset {
  _AFesqueSvc_Store_args__isset() : path(false), file_str(false) {}
  bool path :1;
  bool file_str :1;
} _AFesqueSvc_Store_args__isset;

class AFesqueSvc_Store_args {
 public:

  AFesqueSvc_Store_args(const AFesqueSvc_Store_args&);
  AFesqueSvc_Store_args& operator=(const AFesqueSvc_Store_args&);
  AFesqueSvc_Store_args() noexcept
                        : path(),
                          file_str() {
  }

  virtual ~AFesqueSvc_Store_args() noexcept;
  std::string path;
  std::string file_str;

  _AFesqueSvc_Store_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_file_str(const std::string& val);

  bool operator == (const AFesqueSvc_Store_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(file_str == rhs.file_str))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_Store_pargs {
 public:


  virtual ~AFesqueSvc_Store_pargs() noexcept;
  const std::string* path;
  const std::string* file_str;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Store_result__isset {
  _AFesqueSvc_Store_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Store_result__isset;

class AFesqueSvc_Store_result {
 public:

  AFesqueSvc_Store_result(const AFesqueSvc_Store_result&);
  AFesqueSvc_Store_result& operator=(const AFesqueSvc_Store_result&);
  AFesqueSvc_Store_result() noexcept {
  }

  virtual ~AFesqueSvc_Store_result() noexcept;
  FStatShort success;
  ServerException se;

  _AFesqueSvc_Store_result__isset __isset;

  void __set_success(const FStatShort& val);

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_Store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Store_presult__isset {
  _AFesqueSvc_Store_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_Store_presult__isset;

class AFesqueSvc_Store_presult {
 public:


  virtual ~AFesqueSvc_Store_presult() noexcept;
  FStatShort* success;
  ServerException se;

  _AFesqueSvc_Store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_Remove_args__isset {
  _AFesqueSvc_Remove_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_Remove_args__isset;

class AFesqueSvc_Remove_args {
 public:

  AFesqueSvc_Remove_args(const AFesqueSvc_Remove_args&);
  AFesqueSvc_Remove_args& operator=(const AFesqueSvc_Remove_args&);
  AFesqueSvc_Remove_args() noexcept
                         : path() {
  }

  virtual ~AFesqueSvc_Remove_args() noexcept;
  std::string path;

  _AFesqueSvc_Remove_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_Remove_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_Remove_pargs {
 public:


  virtual ~AFesqueSvc_Remove_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Remove_result__isset {
  _AFesqueSvc_Remove_result__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_Remove_result__isset;

class AFesqueSvc_Remove_result {
 public:

  AFesqueSvc_Remove_result(const AFesqueSvc_Remove_result&);
  AFesqueSvc_Remove_result& operator=(const AFesqueSvc_Remove_result&);
  AFesqueSvc_Remove_result() noexcept {
  }

  virtual ~AFesqueSvc_Remove_result() noexcept;
  ServerException se;

  _AFesqueSvc_Remove_result__isset __isset;

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_Remove_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Remove_presult__isset {
  _AFesqueSvc_Remove_presult__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_Remove_presult__isset;

class AFesqueSvc_Remove_presult {
 public:


  virtual ~AFesqueSvc_Remove_presult() noexcept;
  ServerException se;

  _AFesqueSvc_Remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_Create_args__isset {
  _AFesqueSvc_Create_args__isset() : path(false), mode(false) {}
  bool path :1;
  bool mode :1;
} _AFesqueSvc_Create_args__isset;

class AFesqueSvc_Create_args {
 public:

  AFesqueSvc_Create_args(const AFesqueSvc_Create_args&);
  AFesqueSvc_Create_args& operator=(const AFesqueSvc_Create_args&);
  AFesqueSvc_Create_args() noexcept
                         : path(),
                           mode(0) {
  }

  virtual ~AFesqueSvc_Create_args() noexcept;
  std::string path;
  int32_t mode;

  _AFesqueSvc_Create_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_mode(const int32_t val);

  bool operator == (const AFesqueSvc_Create_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_Create_pargs {
 public:


  virtual ~AFesqueSvc_Create_pargs() noexcept;
  const std::string* path;
  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Create_result__isset {
  _AFesqueSvc_Create_result__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_Create_result__isset;

class AFesqueSvc_Create_result {
 public:

  AFesqueSvc_Create_result(const AFesqueSvc_Create_result&);
  AFesqueSvc_Create_result& operator=(const AFesqueSvc_Create_result&);
  AFesqueSvc_Create_result() noexcept {
  }

  virtual ~AFesqueSvc_Create_result() noexcept;
  ServerException se;

  _AFesqueSvc_Create_result__isset __isset;

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_Create_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_Create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_Create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_Create_presult__isset {
  _AFesqueSvc_Create_presult__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_Create_presult__isset;

class AFesqueSvc_Create_presult {
 public:


  virtual ~AFesqueSvc_Create_presult() noexcept;
  ServerException se;

  _AFesqueSvc_Create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_MakeDir_args__isset {
  _AFesqueSvc_MakeDir_args__isset() : path(false), mode(false) {}
  bool path :1;
  bool mode :1;
} _AFesqueSvc_MakeDir_args__isset;

class AFesqueSvc_MakeDir_args {
 public:

  AFesqueSvc_MakeDir_args(const AFesqueSvc_MakeDir_args&);
  AFesqueSvc_MakeDir_args& operator=(const AFesqueSvc_MakeDir_args&);
  AFesqueSvc_MakeDir_args() noexcept
                          : path(),
                            mode(0) {
  }

  virtual ~AFesqueSvc_MakeDir_args() noexcept;
  std::string path;
  int32_t mode;

  _AFesqueSvc_MakeDir_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_mode(const int32_t val);

  bool operator == (const AFesqueSvc_MakeDir_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_MakeDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_MakeDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_MakeDir_pargs {
 public:


  virtual ~AFesqueSvc_MakeDir_pargs() noexcept;
  const std::string* path;
  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_MakeDir_result__isset {
  _AFesqueSvc_MakeDir_result__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_MakeDir_result__isset;

class AFesqueSvc_MakeDir_result {
 public:

  AFesqueSvc_MakeDir_result(const AFesqueSvc_MakeDir_result&);
  AFesqueSvc_MakeDir_result& operator=(const AFesqueSvc_MakeDir_result&);
  AFesqueSvc_MakeDir_result() noexcept {
  }

  virtual ~AFesqueSvc_MakeDir_result() noexcept;
  ServerException se;

  _AFesqueSvc_MakeDir_result__isset __isset;

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_MakeDir_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_MakeDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_MakeDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_MakeDir_presult__isset {
  _AFesqueSvc_MakeDir_presult__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_MakeDir_presult__isset;

class AFesqueSvc_MakeDir_presult {
 public:


  virtual ~AFesqueSvc_MakeDir_presult() noexcept;
  ServerException se;

  _AFesqueSvc_MakeDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_RemoveDir_args__isset {
  _AFesqueSvc_RemoveDir_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_RemoveDir_args__isset;

class AFesqueSvc_RemoveDir_args {
 public:

  AFesqueSvc_RemoveDir_args(const AFesqueSvc_RemoveDir_args&);
  AFesqueSvc_RemoveDir_args& operator=(const AFesqueSvc_RemoveDir_args&);
  AFesqueSvc_RemoveDir_args() noexcept
                            : path() {
  }

  virtual ~AFesqueSvc_RemoveDir_args() noexcept;
  std::string path;

  _AFesqueSvc_RemoveDir_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_RemoveDir_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_RemoveDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_RemoveDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_RemoveDir_pargs {
 public:


  virtual ~AFesqueSvc_RemoveDir_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_RemoveDir_result__isset {
  _AFesqueSvc_RemoveDir_result__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_RemoveDir_result__isset;

class AFesqueSvc_RemoveDir_result {
 public:

  AFesqueSvc_RemoveDir_result(const AFesqueSvc_RemoveDir_result&);
  AFesqueSvc_RemoveDir_result& operator=(const AFesqueSvc_RemoveDir_result&);
  AFesqueSvc_RemoveDir_result() noexcept {
  }

  virtual ~AFesqueSvc_RemoveDir_result() noexcept;
  ServerException se;

  _AFesqueSvc_RemoveDir_result__isset __isset;

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_RemoveDir_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_RemoveDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_RemoveDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_RemoveDir_presult__isset {
  _AFesqueSvc_RemoveDir_presult__isset() : se(false) {}
  bool se :1;
} _AFesqueSvc_RemoveDir_presult__isset;

class AFesqueSvc_RemoveDir_presult {
 public:


  virtual ~AFesqueSvc_RemoveDir_presult() noexcept;
  ServerException se;

  _AFesqueSvc_RemoveDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_TestAuth_args__isset {
  _AFesqueSvc_TestAuth_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_TestAuth_args__isset;

class AFesqueSvc_TestAuth_args {
 public:

  AFesqueSvc_TestAuth_args(const AFesqueSvc_TestAuth_args&);
  AFesqueSvc_TestAuth_args& operator=(const AFesqueSvc_TestAuth_args&);
  AFesqueSvc_TestAuth_args() noexcept
                           : path() {
  }

  virtual ~AFesqueSvc_TestAuth_args() noexcept;
  std::string path;

  _AFesqueSvc_TestAuth_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_TestAuth_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_TestAuth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_TestAuth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_TestAuth_pargs {
 public:


  virtual ~AFesqueSvc_TestAuth_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_TestAuth_result__isset {
  _AFesqueSvc_TestAuth_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_TestAuth_result__isset;

class AFesqueSvc_TestAuth_result {
 public:

  AFesqueSvc_TestAuth_result(const AFesqueSvc_TestAuth_result&);
  AFesqueSvc_TestAuth_result& operator=(const AFesqueSvc_TestAuth_result&);
  AFesqueSvc_TestAuth_result() noexcept {
  }

  virtual ~AFesqueSvc_TestAuth_result() noexcept;
  FStatShort success;
  ServerException se;

  _AFesqueSvc_TestAuth_result__isset __isset;

  void __set_success(const FStatShort& val);

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_TestAuth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_TestAuth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_TestAuth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_TestAuth_presult__isset {
  _AFesqueSvc_TestAuth_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_TestAuth_presult__isset;

class AFesqueSvc_TestAuth_presult {
 public:


  virtual ~AFesqueSvc_TestAuth_presult() noexcept;
  FStatShort* success;
  ServerException se;

  _AFesqueSvc_TestAuth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_GetFileStat_args__isset {
  _AFesqueSvc_GetFileStat_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_GetFileStat_args__isset;

class AFesqueSvc_GetFileStat_args {
 public:

  AFesqueSvc_GetFileStat_args(const AFesqueSvc_GetFileStat_args&);
  AFesqueSvc_GetFileStat_args& operator=(const AFesqueSvc_GetFileStat_args&);
  AFesqueSvc_GetFileStat_args() noexcept
                              : path() {
  }

  virtual ~AFesqueSvc_GetFileStat_args() noexcept;
  std::string path;

  _AFesqueSvc_GetFileStat_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_GetFileStat_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_GetFileStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_GetFileStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_GetFileStat_pargs {
 public:


  virtual ~AFesqueSvc_GetFileStat_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_GetFileStat_result__isset {
  _AFesqueSvc_GetFileStat_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_GetFileStat_result__isset;

class AFesqueSvc_GetFileStat_result {
 public:

  AFesqueSvc_GetFileStat_result(const AFesqueSvc_GetFileStat_result&);
  AFesqueSvc_GetFileStat_result& operator=(const AFesqueSvc_GetFileStat_result&);
  AFesqueSvc_GetFileStat_result() noexcept {
  }

  virtual ~AFesqueSvc_GetFileStat_result() noexcept;
  FStat success;
  ServerException se;

  _AFesqueSvc_GetFileStat_result__isset __isset;

  void __set_success(const FStat& val);

  void __set_se(const ServerException& val);

  bool operator == (const AFesqueSvc_GetFileStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_GetFileStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_GetFileStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_GetFileStat_presult__isset {
  _AFesqueSvc_GetFileStat_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _AFesqueSvc_GetFileStat_presult__isset;

class AFesqueSvc_GetFileStat_presult {
 public:


  virtual ~AFesqueSvc_GetFileStat_presult() noexcept;
  FStat* success;
  ServerException se;

  _AFesqueSvc_GetFileStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_ListDir_args__isset {
  _AFesqueSvc_ListDir_args__isset() : path(false) {}
  bool path :1;
} _AFesqueSvc_ListDir_args__isset;

class AFesqueSvc_ListDir_args {
 public:

  AFesqueSvc_ListDir_args(const AFesqueSvc_ListDir_args&);
  AFesqueSvc_ListDir_args& operator=(const AFesqueSvc_ListDir_args&);
  AFesqueSvc_ListDir_args() noexcept
                          : path() {
  }

  virtual ~AFesqueSvc_ListDir_args() noexcept;
  std::string path;

  _AFesqueSvc_ListDir_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const AFesqueSvc_ListDir_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_ListDir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_ListDir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_ListDir_pargs {
 public:


  virtual ~AFesqueSvc_ListDir_pargs() noexcept;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_ListDir_result__isset {
  _AFesqueSvc_ListDir_result__isset() : success(false) {}
  bool success :1;
} _AFesqueSvc_ListDir_result__isset;

class AFesqueSvc_ListDir_result {
 public:

  AFesqueSvc_ListDir_result(const AFesqueSvc_ListDir_result&);
  AFesqueSvc_ListDir_result& operator=(const AFesqueSvc_ListDir_result&);
  AFesqueSvc_ListDir_result() noexcept {
  }

  virtual ~AFesqueSvc_ListDir_result() noexcept;
  std::vector<tDirent>  success;

  _AFesqueSvc_ListDir_result__isset __isset;

  void __set_success(const std::vector<tDirent> & val);

  bool operator == (const AFesqueSvc_ListDir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_ListDir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_ListDir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AFesqueSvc_ListDir_presult__isset {
  _AFesqueSvc_ListDir_presult__isset() : success(false) {}
  bool success :1;
} _AFesqueSvc_ListDir_presult__isset;

class AFesqueSvc_ListDir_presult {
 public:


  virtual ~AFesqueSvc_ListDir_presult() noexcept;
  std::vector<tDirent> * success;

  _AFesqueSvc_ListDir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AFesqueSvc_server_test_args__isset {
  _AFesqueSvc_server_test_args__isset() : msg(false), delay(false) {}
  bool msg :1;
  bool delay :1;
} _AFesqueSvc_server_test_args__isset;

class AFesqueSvc_server_test_args {
 public:

  AFesqueSvc_server_test_args(const AFesqueSvc_server_test_args&);
  AFesqueSvc_server_test_args& operator=(const AFesqueSvc_server_test_args&);
  AFesqueSvc_server_test_args() noexcept
                              : msg(),
                                delay(0) {
  }

  virtual ~AFesqueSvc_server_test_args() noexcept;
  std::string msg;
  int32_t delay;

  _AFesqueSvc_server_test_args__isset __isset;

  void __set_msg(const std::string& val);

  void __set_delay(const int32_t val);

  bool operator == (const AFesqueSvc_server_test_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(delay == rhs.delay))
      return false;
    return true;
  }
  bool operator != (const AFesqueSvc_server_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_server_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_server_test_pargs {
 public:


  virtual ~AFesqueSvc_server_test_pargs() noexcept;
  const std::string* msg;
  const int32_t* delay;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_server_test_result {
 public:

  AFesqueSvc_server_test_result(const AFesqueSvc_server_test_result&) noexcept;
  AFesqueSvc_server_test_result& operator=(const AFesqueSvc_server_test_result&) noexcept;
  AFesqueSvc_server_test_result() noexcept {
  }

  virtual ~AFesqueSvc_server_test_result() noexcept;

  bool operator == (const AFesqueSvc_server_test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AFesqueSvc_server_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AFesqueSvc_server_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AFesqueSvc_server_test_presult {
 public:


  virtual ~AFesqueSvc_server_test_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AFesqueSvcClient : virtual public AFesqueSvcIf {
 public:
  AFesqueSvcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AFesqueSvcClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Fetch(std::string& _return, const std::string& path) override;
  void send_Fetch(const std::string& path);
  void recv_Fetch(std::string& _return);
  void Fetch_Chunk(std::string& _return, const std::string& path, const int32_t chunk) override;
  void send_Fetch_Chunk(const std::string& path, const int32_t chunk);
  void recv_Fetch_Chunk(std::string& _return);
  void Store(FStatShort& _return, const std::string& path, const std::string& file_str) override;
  void send_Store(const std::string& path, const std::string& file_str);
  void recv_Store(FStatShort& _return);
  void Remove(const std::string& path) override;
  void send_Remove(const std::string& path);
  void recv_Remove();
  void Create(const std::string& path, const int32_t mode) override;
  void send_Create(const std::string& path, const int32_t mode);
  void recv_Create();
  void MakeDir(const std::string& path, const int32_t mode) override;
  void send_MakeDir(const std::string& path, const int32_t mode);
  void recv_MakeDir();
  void RemoveDir(const std::string& path) override;
  void send_RemoveDir(const std::string& path);
  void recv_RemoveDir();
  void TestAuth(FStatShort& _return, const std::string& path) override;
  void send_TestAuth(const std::string& path);
  void recv_TestAuth(FStatShort& _return);
  void GetFileStat(FStat& _return, const std::string& path) override;
  void send_GetFileStat(const std::string& path);
  void recv_GetFileStat(FStat& _return);
  void ListDir(std::vector<tDirent> & _return, const std::string& path) override;
  void send_ListDir(const std::string& path);
  void recv_ListDir(std::vector<tDirent> & _return);
  void server_test(const std::string& msg, const int32_t delay) override;
  void send_server_test(const std::string& msg, const int32_t delay);
  void recv_server_test();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AFesqueSvcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AFesqueSvcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AFesqueSvcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Fetch_Chunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MakeDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TestAuth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFileStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ListDir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_server_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AFesqueSvcProcessor(::std::shared_ptr<AFesqueSvcIf> iface) :
    iface_(iface) {
    processMap_["Fetch"] = &AFesqueSvcProcessor::process_Fetch;
    processMap_["Fetch_Chunk"] = &AFesqueSvcProcessor::process_Fetch_Chunk;
    processMap_["Store"] = &AFesqueSvcProcessor::process_Store;
    processMap_["Remove"] = &AFesqueSvcProcessor::process_Remove;
    processMap_["Create"] = &AFesqueSvcProcessor::process_Create;
    processMap_["MakeDir"] = &AFesqueSvcProcessor::process_MakeDir;
    processMap_["RemoveDir"] = &AFesqueSvcProcessor::process_RemoveDir;
    processMap_["TestAuth"] = &AFesqueSvcProcessor::process_TestAuth;
    processMap_["GetFileStat"] = &AFesqueSvcProcessor::process_GetFileStat;
    processMap_["ListDir"] = &AFesqueSvcProcessor::process_ListDir;
    processMap_["server_test"] = &AFesqueSvcProcessor::process_server_test;
  }

  virtual ~AFesqueSvcProcessor() {}
};

class AFesqueSvcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AFesqueSvcProcessorFactory(const ::std::shared_ptr< AFesqueSvcIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AFesqueSvcIfFactory > handlerFactory_;
};

class AFesqueSvcMultiface : virtual public AFesqueSvcIf {
 public:
  AFesqueSvcMultiface(std::vector<std::shared_ptr<AFesqueSvcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AFesqueSvcMultiface() {}
 protected:
  std::vector<std::shared_ptr<AFesqueSvcIf> > ifaces_;
  AFesqueSvcMultiface() {}
  void add(::std::shared_ptr<AFesqueSvcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Fetch(std::string& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Fetch(_return, path);
    }
    ifaces_[i]->Fetch(_return, path);
    return;
  }

  void Fetch_Chunk(std::string& _return, const std::string& path, const int32_t chunk) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Fetch_Chunk(_return, path, chunk);
    }
    ifaces_[i]->Fetch_Chunk(_return, path, chunk);
    return;
  }

  void Store(FStatShort& _return, const std::string& path, const std::string& file_str) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Store(_return, path, file_str);
    }
    ifaces_[i]->Store(_return, path, file_str);
    return;
  }

  void Remove(const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Remove(path);
    }
    ifaces_[i]->Remove(path);
  }

  void Create(const std::string& path, const int32_t mode) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Create(path, mode);
    }
    ifaces_[i]->Create(path, mode);
  }

  void MakeDir(const std::string& path, const int32_t mode) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MakeDir(path, mode);
    }
    ifaces_[i]->MakeDir(path, mode);
  }

  void RemoveDir(const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveDir(path);
    }
    ifaces_[i]->RemoveDir(path);
  }

  void TestAuth(FStatShort& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TestAuth(_return, path);
    }
    ifaces_[i]->TestAuth(_return, path);
    return;
  }

  void GetFileStat(FStat& _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFileStat(_return, path);
    }
    ifaces_[i]->GetFileStat(_return, path);
    return;
  }

  void ListDir(std::vector<tDirent> & _return, const std::string& path) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ListDir(_return, path);
    }
    ifaces_[i]->ListDir(_return, path);
    return;
  }

  void server_test(const std::string& msg, const int32_t delay) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->server_test(msg, delay);
    }
    ifaces_[i]->server_test(msg, delay);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AFesqueSvcConcurrentClient : virtual public AFesqueSvcIf {
 public:
  AFesqueSvcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AFesqueSvcConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Fetch(std::string& _return, const std::string& path) override;
  int32_t send_Fetch(const std::string& path);
  void recv_Fetch(std::string& _return, const int32_t seqid);
  void Fetch_Chunk(std::string& _return, const std::string& path, const int32_t chunk) override;
  int32_t send_Fetch_Chunk(const std::string& path, const int32_t chunk);
  void recv_Fetch_Chunk(std::string& _return, const int32_t seqid);
  void Store(FStatShort& _return, const std::string& path, const std::string& file_str) override;
  int32_t send_Store(const std::string& path, const std::string& file_str);
  void recv_Store(FStatShort& _return, const int32_t seqid);
  void Remove(const std::string& path) override;
  int32_t send_Remove(const std::string& path);
  void recv_Remove(const int32_t seqid);
  void Create(const std::string& path, const int32_t mode) override;
  int32_t send_Create(const std::string& path, const int32_t mode);
  void recv_Create(const int32_t seqid);
  void MakeDir(const std::string& path, const int32_t mode) override;
  int32_t send_MakeDir(const std::string& path, const int32_t mode);
  void recv_MakeDir(const int32_t seqid);
  void RemoveDir(const std::string& path) override;
  int32_t send_RemoveDir(const std::string& path);
  void recv_RemoveDir(const int32_t seqid);
  void TestAuth(FStatShort& _return, const std::string& path) override;
  int32_t send_TestAuth(const std::string& path);
  void recv_TestAuth(FStatShort& _return, const int32_t seqid);
  void GetFileStat(FStat& _return, const std::string& path) override;
  int32_t send_GetFileStat(const std::string& path);
  void recv_GetFileStat(FStat& _return, const int32_t seqid);
  void ListDir(std::vector<tDirent> & _return, const std::string& path) override;
  int32_t send_ListDir(const std::string& path);
  void recv_ListDir(std::vector<tDirent> & _return, const int32_t seqid);
  void server_test(const std::string& msg, const int32_t delay) override;
  int32_t send_server_test(const std::string& msg, const int32_t delay);
  void recv_server_test(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
